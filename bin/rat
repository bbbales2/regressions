#!/usr/bin/env python
import argparse
import os
import sys

parser = argparse.ArgumentParser(
    prog = "rat",
    description = "Do calculation with rat model",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.set_defaults(func=lambda x: parser.print_usage())

parser.add_argument("model", type = str, help = "Rat model file")
parser.add_argument("output", type = str, help = "Folder to store output in (folder will be created if it doesn't exist)")
parser.add_argument(
    "data",
    type = str,
    nargs = "+",
    help = """Filename or a list of name=file pairs containing data (.csv, .feather, .parquet)"""
)
parser.add_argument("--method", choices = ["optimize", "sample"], default = "sample", help = "Run sampler or optimizer on model")
parser.add_argument("--chains", type = int, default = 4, help = "Number of MCMC chains or optimization trajectories")
parser.add_argument("--init", type = float, default = 2.0, help = "Random init radius")
parser.add_argument("--num_warmup", type = int, default = 1000, help = "Number of draws to use for warmup (only available for sample)")
parser.add_argument("--num_draws", type = int, default = 1000, help = "Number of draws to sample after warmup (only available for sample)")
parser.add_argument("--thin", type = int, default = 1, help = "Use this many internal draws to compute each output draw (only available for sample)")
parser.add_argument("--retries", type = int, default = 4, help = "Number of times to retry optimization (only available for optimize)")
parser.add_argument("--tolerance", type = float, default = 1e-2, help = "All optimization results must be within rtol = atol = tolerance of each other or throw an error (only available for optimize)")
parser.add_argument("--target_acceptance_rate", type = float, default = 0.85, help = "Target acceptance rate for adaptation")
parser.add_argument("--compile_path", type = str, default = None, help = "Path to save compiled model in (must end in .py)")
parser.add_argument("--overwrite", action = "store_true", help = "Overwrite existing files")

if len(sys.argv) < 2:
    parser.print_help()
    exit(1)

args = parser.parse_args()

data_filenames = {}
if len(args.data) == 1 and "=" not in args.data[0]:
    data_filenames = {
        "default" : args.data[0]
    }
else:
    for keyvalue in args.data:
        try:
            name, value = [item.strip() for item in keyvalue.split("=")]
        except:
            print(
                f"Error parsing `{keyvalue}`.\n"
                " Data can be passed in as a single filename, or, if\n"
                " there are multiple files, as a sequence of named pairs,\n"
                " `name=file`. For instance, to pass in two dataframes,\n"
                " carrot.csv and lime.csv we could do this with\n"
                "\n"
                "     rat ... orange=carrot.csv green=lime.csv\n"
                "\n"
                "Names are (that's what orange and green are) required unless\n"
                " a single dataframe is passed in which case a name is optional\n"
                "\n"
                "Because `=` is used in parsing, it cannot be part of the filename"
            )
            exit(1)
        
        if name in data_filenames:
            print(f"{name} used as a name at least twice. Data names must be unique")
            exit(1)

        data_filenames[name] = value

model_filename = args.model
output_folder = args.output
method = args.method
chains = args.chains
init = args.init
num_warmup = args.num_warmup
num_draws = args.num_draws
thin = args.thin
retries = args.retries
tolerance = args.tolerance
target_acceptance_rate = args.target_acceptance_rate
compile_path = args.compile_path
overwrite = args.overwrite

if os.path.exists(output_folder) and not overwrite:
    raise FileExistsError(f"Output folder {output_folder} exists and overwrite is not True")

import pandas
from rat.model import Model

data = {}
for name, dataframe_filename in data_filenames.items():
    root, ext = os.path.splitext(dataframe_filename)

    if ext == ".csv":
        data[name] = pandas.read_csv(dataframe_filename)
    elif ext == ".feather":
        data[name] = pandas.read_feather(dataframe_filename)
    elif ext == ".parquet":
        data[name] = pandas.read_parquet(dataframe_filename)
    else:
        raise Exception(f"Don't know how to read {dataframe_filename} with extension {ext}. Must be appropriately formatted file ending in .csv, .feather, or .parquet")

with open(model_filename) as f:
    model_string = f.read().strip()

print("Compiling model")
model = Model(data, model_string=model_string, compile_path=compile_path, overwrite=overwrite)

if method == "optimize":
    print("Running optimization")
    fit = model.optimize(init=init, chains=chains, retries=retries, tolerance=tolerance)
    print("Writing output")
    fit.save(output_folder, overwrite = overwrite)
else:
    print("Running MCMC")
    fit = model.sample(num_warmup=num_warmup, num_draws=num_draws, chains=chains, init=init, thin = thin, target_acceptance_rate=target_acceptance_rate)
    print("Writing output")
    fit.save(output_folder, overwrite = overwrite)